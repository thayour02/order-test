// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: customer.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (oidc_sub, name, email, phone)
VALUES ($1, $2, $3, $4)
RETURNING id, name, email, phone, oidc_sub, created_at
`

type CreateCustomerParams struct {
	OidcSub string        `json:"oidc_sub"`
	Name    string        `json:"name"`
	Email   string        `json:"email"`
	Phone   sql.NullInt64 `json:"phone"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.OidcSub,
		arg.Name,
		arg.Email,
		arg.Phone,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.OidcSub,
		&i.CreatedAt,
	)
	return i, err
}

const getCustomerByOIDCSub = `-- name: GetCustomerByOIDCSub :one
SELECT id, oidc_sub, name, email, phone, created_at
FROM customers
WHERE oidc_sub = $1
`

type GetCustomerByOIDCSubRow struct {
	ID        int64         `json:"id"`
	OidcSub   string        `json:"oidc_sub"`
	Name      string        `json:"name"`
	Email     string        `json:"email"`
	Phone     sql.NullInt64 `json:"phone"`
	CreatedAt time.Time     `json:"created_at"`
}

func (q *Queries) GetCustomerByOIDCSub(ctx context.Context, oidcSub string) (GetCustomerByOIDCSubRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByOIDCSub, oidcSub)
	var i GetCustomerByOIDCSubRow
	err := row.Scan(
		&i.ID,
		&i.OidcSub,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}
