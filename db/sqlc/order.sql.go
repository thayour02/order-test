// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: order.sql

package db

import (
	"context"
	"time"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (customer_id, total)
VALUES ($1, $2)
RETURNING id, customer_id, total, created_at
`

type CreateOrderParams struct {
	CustomerID int64  `json:"customer_id"`
	Total      string `json:"total"`
}

type CreateOrderRow struct {
	ID         int64     `json:"id"`
	CustomerID int64     `json:"customer_id"`
	Total      string    `json:"total"`
	CreatedAt  time.Time `json:"created_at"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (CreateOrderRow, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.CustomerID, arg.Total)
	var i CreateOrderRow
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Total,
		&i.CreatedAt,
	)
	return i, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (order_id, product_id, quantity, subtotal)
VALUES ($1, $2, $3, $4)
RETURNING  order_id, product_id, quantity, subtotal
`

type CreateOrderItemParams struct {
	OrderID   int64  `json:"order_id"`
	ProductID int64  `json:"product_id"`
	Quantity  int32  `json:"quantity"`
	Subtotal  string `json:"subtotal"`
}

type CreateOrderItemRow struct {
	OrderID   int64  `json:"order_id"`
	ProductID int64  `json:"product_id"`
	Quantity  int32  `json:"quantity"`
	Subtotal  string `json:"subtotal"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (CreateOrderItemRow, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Subtotal,
	)
	var i CreateOrderItemRow
	err := row.Scan(
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.Subtotal,
	)
	return i, err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, customer_id, total, created_at
FROM orders
WHERE id = $1
`

type GetOrderByIDRow struct {
	ID         int64     `json:"id"`
	CustomerID int64     `json:"customer_id"`
	Total      string    `json:"total"`
	CreatedAt  time.Time `json:"created_at"`
}

func (q *Queries) GetOrderByID(ctx context.Context, id int64) (GetOrderByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, id)
	var i GetOrderByIDRow
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Total,
		&i.CreatedAt,
	)
	return i, err
}

const getOrdersByCustomerID = `-- name: GetOrdersByCustomerID :many
SELECT id, customer_id, total, created_at
FROM orders
WHERE customer_id = $1
ORDER BY created_at DESC
`

type GetOrdersByCustomerIDRow struct {
	ID         int64     `json:"id"`
	CustomerID int64     `json:"customer_id"`
	Total      string    `json:"total"`
	CreatedAt  time.Time `json:"created_at"`
}

func (q *Queries) GetOrdersByCustomerID(ctx context.Context, customerID int64) ([]GetOrdersByCustomerIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersByCustomerID, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrdersByCustomerIDRow
	for rows.Next() {
		var i GetOrdersByCustomerIDRow
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Total,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderTotal = `-- name: UpdateOrderTotal :exec
UPDATE orders
SET total = $2
WHERE id = $1
`

type UpdateOrderTotalParams struct {
	ID    int64  `json:"id"`
	Total string `json:"total"`
}

func (q *Queries) UpdateOrderTotal(ctx context.Context, arg UpdateOrderTotalParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderTotal, arg.ID, arg.Total)
	return err
}
