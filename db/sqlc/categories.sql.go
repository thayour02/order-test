// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: categories.sql

package db

import (
	"context"
	"database/sql"
)

const avgPriceForCategory = `-- name: AvgPriceForCategory :one
WITH RECURSIVE cat_tree AS (
  SELECT categories.id AS cat_id
  FROM categories
  WHERE categories.id = $1
  UNION ALL
  SELECT c.id
  FROM categories c
  JOIN cat_tree ct ON c.parent_id = ct.cat_id
)
SELECT CAST(COALESCE(AVG(p.price), 0) AS float8) AS avg_price
FROM products p
JOIN product_categories pc ON pc.product_id = p.id
WHERE pc.category_id IN (SELECT cat_id FROM cat_tree)
`

func (q *Queries) AvgPriceForCategory(ctx context.Context, id int64) (float64, error) {
	row := q.db.QueryRowContext(ctx, avgPriceForCategory, id)
	var avg_price float64
	err := row.Scan(&avg_price)
	return avg_price, err
}

const createCategory = `-- name: CreateCategory :one

INSERT INTO categories (name, parent_id) VALUES ($1, $2) RETURNING id, name, parent_id
`

type CreateCategoryParams struct {
	Name     string        `json:"name"`
	ParentID sql.NullInt64 `json:"parent_id"`
}

// db/queries.sql
func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.Name, arg.ParentID)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.ParentID)
	return i, err
}
