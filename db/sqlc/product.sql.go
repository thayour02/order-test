// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: product.sql

package db

import (
	"context"
	"database/sql"
)

const addProductCategory = `-- name: AddProductCategory :exec
INSERT INTO product_categories (product_id, category_id) VALUES ($1, $2) ON CONFLICT DO NOTHING
`

type AddProductCategoryParams struct {
	ProductID  int64 `json:"product_id"`
	CategoryID int64 `json:"category_id"`
}

func (q *Queries) AddProductCategory(ctx context.Context, arg AddProductCategoryParams) error {
	_, err := q.db.ExecContext(ctx, addProductCategory, arg.ProductID, arg.CategoryID)
	return err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, description, price) VALUES ($1, $2, $3) RETURNING id,  name, description, price, created_at
`

type CreateProductParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Price       string         `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct, arg.Name, arg.Description, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, name, description, price, created_at
FROM products
ORDER BY created_at DESC
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, description, price, created_at FROM products WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const productsInCategoryRecursive = `-- name: ProductsInCategoryRecursive :many
WITH RECURSIVE cat_tree AS (
  SELECT categories.id AS cat_id
  FROM categories
  WHERE categories.id = $1
  UNION ALL
  SELECT c.id
  FROM categories c
  JOIN cat_tree ct ON c.parent_id = ct.cat_id
)
SELECT p.id,  p.name, p.description, p.price, p.created_at
FROM products p
JOIN product_categories pc ON pc.product_id = p.id
WHERE pc.category_id IN (SELECT cat_id FROM cat_tree)
`

func (q *Queries) ProductsInCategoryRecursive(ctx context.Context, id int64) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, productsInCategoryRecursive, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
